// Ensure the top-level namespace
var urlshort = urlshort || {};

extend(urlshort,'queue.activity');
 
!function(window, document, m, $, moment) { 
  
  var activity = urlshort.queue.activity;
  var common   = urlshort.queue.common;
  
  
  /**
   * Activity Entity Object
   * 
   * @param data from a server request
   */ 
  activity.Activity = function (data) {
       
      this.transitionId         = m.prop(data.transitionId);
      this.dateOccured          = m.prop(Date.createFromMysql(data.dateOccured));
      this.stateId              = new common.ActivityState(data.stateId);
      this.workerId             = m.prop(data.workerId);
      this.jobId                = m.prop(data.jobId);
      this.transitionMessage    = m.prop(data.transitionMessage);
      this.processHandle        = m.prop(data.processHandle); 

  };
  
 // Collection for the Model

 activity.ActivityList = function(data) {
    var equals = function(nodeA,nodeB){
        return nodeA.transitionId() === nodeB.transitionId();
    };
    var compare = function(nodeA,nodeB){
        if (nodeA.transitionId() < nodeB.transitionId()) {
            return -1;
        }
        if (nodeA.transitionId()  > nodeB.transitionId()) {
        return 1;
       }
       // a must be equal to b
       return 0;
        
    };
    
    return new SortedSet(jQuery.makeArray(data),equals, compare);
 };
    
 // Factory to setup and instance of our Request builder  
 activity.ActivityRequest = (function() {
    
    var request =  new urlshort.queue.common.Request('empty key','/queue/activities', {
        'limit'   : 'limit' // server:client
        ,'offset' : 'offset'
        ,'order'  : 'order'
        ,'before' : 'before'
        ,'after'  : 'after'
    });
    
    
    request.findActivity = function(params) {
        return this.prepareRequest({
            method : 'GET' 
           ,type   : activity.Activity
           ,data   : params
        }).then(activity.ActivityList);
        
    }
    
    return  request;

 }());
 
 

 // A view model 
 
 activity.vm = (function(window, document, $, m, moment){
    var vm                       = {};
    
    /**
     * Array of Activity State object
     * 
     */ 
    var listActivityStates       = m.prop();
    
    /**
     * A duration object generated by moment library
     * 
     * @var duration
     */ 
    var selectedDateRange        = m.prop();
    
    /**
     * Instance of the Paged Store
     * 
     * @var urlshort.queue.common.PageDataStore
     */ 
    vm.pagedStore               = m.prop();
    
    /**
     * Worker Handle to filter by
     * 
     * @var string a work handle (UUID)
     */ 
    vm.selectedWork = m.prop();
    
    /**
     * Selected Job to filter by
     * 
     * @var string a job (UUID)
     */ 
    vm.selectedJob = m.prop(); 
    
    /**
     * The collection of records load from
     * the requets API
     * 
     * @var Array
     */ 
    vm.recordStore = [];
    
    /**
     * Default config options
     */ 
    var defaultOption = {
         store : null
        ,dateRange : 'P7D'
        ,listedStates : [1] //STATE_ADD
    }
    
    
    
    vm.filterRecords = function(data) {
        
        
        
    }
    
    
    /**
     * Init this vm with options that will
     * override internal defaults
     * 
     * Need to pass the RequestAPI to use
     * 
     * Options  {
     *    store : null
     *   ,dateRange : 'P7D'
     *   ,listedStates : [1] //STATE_ADD
     * }
     * 
     * @return self
     * @param object a config object
     */ 
    vm.init = function(options) {
        var opt = $.extend({},defaultOption,options);
    
        vm.pagedStore(opt.store);
        vm.visisbleStates(opt.listedStates);
        vm.selectedDateRange(opt.dateRange);
        
        
        return vm.listActivities();
    }
     
    // Properties for filtersing
    
    /**
     * Accepts an array if states to remain
     * visible to the user.
     * 
     * internally convet each numeric value into a
     * new instance of  urlshort.queue.activity.State
     * 
     * Implements same interface as m.prop so a second
     * call will return the assigned states.
     * 
     * @param array states
     * @return array[State] the required states
     */ 
    vm.visisbleStates = function(states) {
        
        if(states instanceof Array) {
            
            //clear the existing list
            listActivityStates([]);
        
            //convert numberic index to arrays
            states.forEach(function(element, index, array){
                listActivityStates().push(new common.ActivityState(element))           
            });
        }
        
        return listActivityStates();
    }
    
    /**
     * Accepts a limited list of ISO8601 durations
     * will convert the value into a moment.js duration
     * 
     * If the duration is unknown it assigned default 1 day
     * 
     * return a function implements m.prop
     * 
     * @param string ISO8601 date duration
     * @return string the date duration
     */ 
    vm.selectedDateRage = function(rangeName) {
        if(typeof rangeName !== 'undefined') {
            var dur;
            switch(rangeName) {
                case 'P1Y' : dur = moment.duration(1, 'years'); break;
                case 'P1M' : dur = moment.duration(1,'months'); break;
                case 'PT1H': dur = moment.duration(1, 'hours'); break;
                case 'P6M' : dur = moment.duration(6, 'months'); break;
                case 'P7D' : dur = moment.duration(1,'weeks'); break;
                case 'P1D' : dur = moment.duration(1, 'days'); break;
                default: dur = moment.duration(1, 'days');
            }
            
            selectedDateRange(dur);
        }
        
        return selectedDateRange()
    }
    
    
    
    
    /**
     * Fetch the next set of records
     * 
     * 
     */ 
    vm.onPageFoward = function() {
        vm.recordStore([]);
             
        
        
    }
    
    /**
     * Pushes the last page of record out
     * 
     */ 
    vm.onPageBack = function() {
        vm.recordStore([]);
             
        
    }
    
    /**
     * Clears the store and starts from the first page
     * 
     */ 
    vm.onRefresh = function() {
        vm.recordStore([]);
        
        
    }
     
    return vm; 
    
    
 }(window, document, $, m, moment));
     
     
     
}(window, document, m, $, moment);